generated by Gemini(Google)

UIを持つデスクトップアプリケーションのディレクトリ構造例（Java、クリーンアーキテクチャ）
前提

Javaで開発
クリーンアーキテクチャ適用
UIはSwing/JavaFXなどのライブラリを使用
ディレクトリ構造

src
├── main
│   ├── domain
│   │   ├── entity
│   │   │   └── User.java
│   │   └── usecase
│   │       ├── CreateUserUseCase.java
│   │       └── GetUserUseCase.java
│   ├── infrastructure
│   │   ├── database
│   │   │   └── UserRepository.java
│   │   └── ui
│   │       ├── swing
│   │       │   ├── CreateUserFrame.java
│   │       │   └── UserListFrame.java
│   │       └── javaFx
│   │           ├── CreateUserController.java
│   │           └── UserListController.java
│   └── application
│       ├── Main.java
│       └── ApplicationRunner.java
└── resources
    ├── images
    │   └── icon.png
    └── properties
        └── application.properties
説明

src/main
    domain: ドメイン層。エンティティとユースケースを定義します。
        entity: ドメインモデルを表すエンティティクラスを格納します。
            User.java: ユーザー情報を表すエンティティクラス。
        usecase: ビジネスロジックを表すユースケースクラスを格納します。
            CreateUserUseCase.java: ユーザーを作成するユースケースクラス。
            GetUserUseCase.java: ユーザーを取得するユースケースクラス。
    infrastructure: インフラストラクチャ層。外部システムとの接続やデータ永続化などを担います。
        database: データベースアクセスのためのクラスを格納します。
            UserRepository.java: ユーザー情報を操作するリポジトリクラス。
        ui: UI実装のためのクラスを格納します。
            javaFx: JavaFXライブラリを使用したUI実装クラスを格納します。
                CreateUserFrame.java: ユーザー作成画面を実装するコントローラークラス。
                UserListFrame.java: ユーザー一覧画面を実装するコントローラークラス。
    application: アプリケーション起動処理とユースケース実行を担います。
        Main.java: アプリケーションのエントリーポイントとなるクラス。
        ApplicationRunner.java: アプリケーション起動処理とユースケース実行を担うクラス。
